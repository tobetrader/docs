{"result":"# 交易系统部署文档\n\n## 数据库\n### 安装\n步骤省略，按正常流程安装即可。几乎可以支持所有数据库，建议使用mysql系列\n### 创建表\n```bash\n# 执行创建脚本\n# 脚本位置 在发布的版本中的sinkdb目录下 DBCreateInit.Mysql.sql DBCreateDown.Mysql.sql\nDBCreateInit.Mysql.sql\n```\n## Nodejs\n### 安装\n非必要，只有需要部署客户端才需要安装\n```bash\n# 下载\n# 官网地址：https://nodejs.org\n# 中文网地址：http://nodejs.cn\n# 推荐使用12+版本\nwget https://nodejs.org/dist/v16.5.0/node-v16.5.0-linux-x64.tar.xz\n\n# 解压\ntar -xvf node-v16.5.0-linux-x64.tar.xz\n\n# 修改解压包名称\nmv node-v10.15.3-linux-x64 node \n\n// 建软连接，让全局可用node和npm\nln -s /usr/local/node/bin/node /usr/bin/node\nln -s /usr/local/node/bin/npm /usr/bin/npm\n```\n## 编译部署\n### 编译\n#### 组件安装\n```bash\n# 安装gcc\nyum install gcc-c++\nyum install gdb\n\n# 安装svn\nyum install subversion\nyum install cyrus-sasl cyrus-sasl-plain\n```\n#### 拉取脚本\n```bash\n# repair_build.sh 需要手动放入\ncd ~ && ./repair_build.sh `${build工程的仓库地址}`\n```\n#### 设置环境变量\n```bash\ncd ~/batch && chmod u+x set_global_env.linux.sh && ./set_global_env.linux.sh\n```\n#### 修改编译配置\n```bash\n# 到指定目录\ncd ~/autobuild/env\n\n# 创建配置文件\ncp remote_release.ini.example remote_release.ini\n\n# 修改配置文件\n# remote_release_ipaddr 需要将编译文件推送到指定部署机器的ip\n# remote_release_userid 需要将编译文件推送到指定部署机器的用户名\n# remote_release_path 需要将编译文件推送到指定部署机器的目录\nvi remote_release.ini\n\n# 将本机的公钥复制到远程机器的authorized_keys文件中，此步骤根据需要操作\nssh-copy-id trade@127.0.0.1\n```\n#### 编译\n```bash\n# 到编译目录\ncd ~/autobuild\n\n# 编译交易核心\n./build_trade.sh\n\n# 编译tools\n./buildtools.sh\n```\n### 部署\n#### 拉取脚本\n```bash\n# 到部署机器的指定用户目录\ncd ~ \n\n# 拉取部署脚本\ncd ~ && ./repair_run.sh `${build工程的仓库地址}`\n```\n#### 设置全局命令\n```bash\n# 编辑环境变量文件\nvi ~/.bashrc\n\n# 添加内容\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.\nexport LANG=en_US\nexport PATH=$PATH:$HOME/run:$HOME/control\t\n\n# 更新环境变量\nsource ~/.bashrc\n```\n#### 部署运行\n```bash\n# 修改客户端配置\n# 只有需要部署客户端才需要此操作\ncp ~test/client/nginx.conf.template ~test/client/nginx.conf && vi ~test/client/nginx.conf\n\n# 到指定目录\ncd ~/deploy\n\n# 修改模块配置文件，按需添加模块\n# 模块说明：\n# trade 交易核心\n# sinkredis 同步数据到redis\n# sinkdb 同步数据库到数据库\n# query 查询\n# redis\n# markatmaker 行情\n# triggerorder 条件单\n# client 客户端\nvi list.run\n\n# 复制网络配置文件模板\ncp network.ini.example network.ini\n\n# 编辑网络配置文件，按需更改相关配置\nvi network.ini\n\n# 初始化\nchmod u+x init.sh && ./init.sh 16g\n\n# 选取发布版本\n./get_release.sh\n\n# 发布\n./publish.sh\n\n# 启停\nstart.sh\nshow.sh\nstop.sh\n\n# 多机操作\ncd control\nget_lastest_all\npublishall_all\nstopall\nshowall\nstopall\n```\n## 相关文件说明\n```json\n├── control  // 该文件夹下的脚本用于控制多台服务\n│\t\t├── chkverall\n│\t\t├── get_release_all       \t// 获取所有机器上编译好的版本\n│\t\t├── publishall\t\t\t\t\t\t\t// 发布所有机器上服务\n│\t\t├── startall\t\t\t\t\t\t\t\t// 启动所有机器上服务\n│\t\t├── cleanall\t\t\t\t\t\t\t\t// 清空所有机器上服务的缓存，日志文件，流水文件等(必须所有服务停止后才能执行)\n│\t\t├── goto\t\t\t\t\t\t\t\t\t\t// 登录到指定的机器\n│\t\t├── showall\t\t\t\t\t\t\t\t\t// 显示所有机器上服务\n│\t\t├── stopall\t\t\t\t\t\t\t\t\t// 停止所有机器上服务\n│\t\t├── get_lastest_all\t\t\t\t\t// 获取所有服务上编译好的最新的版本\n│\t\t├── initall\t\t\t\t\t\t\t\t\t// 初始化所有机器\n│\t\t├── sshall\t\t\t\t\t\t\t\t\t// 建立所有机器链接\n│\t\t├── updateall\t\t\t\t\t\t\t\t// 更新所有机器上服务\n│\t\t├── list.hosts\t\t\t\t\t\t\t// 所有机器配置文件(需要手动创建)\n│\t\t├── list.hosts.example\t\t\t// 所有机器配置文件模板\n│\t\t└── onestep\t\t\t\t\t\t\t\t\t// 所有机器上的服务初始化，发布，启动一步完成\n├── deploy  // 该文件夹下的脚本用于初始化和发布\n│\t\t├── get_release.sh\t\t\t\t\t// 获取当前机器上编译好的版本\n│\t\t├── get_lastest.sh\t\t\t\t\t// 获取当前机器上最新的编译好的文件\n│\t\t├── publish.sh\t\t\t\t\t\t\t// 发布当前机器上的服务\n│\t\t├── init.sh\t\t\t\t\t\t\t\t\t// 初始化当前机器上的服务\n│\t\t├── onestep.sh\t\t\t\t\t\t\t// 当前机器的服务初始化，发布，启动一步完成\n│\t\t├── list.run\t\t\t\t\t\t\t\t// 当前机器上的服务模块配置(只有初始化时才有用，需要手动创建)\n│\t\t├── list.run.all\t\t\t\t\t\t// 所有服务模块配置\n│\t\t└── network.ini\t\t\t\t\t\t\t// 配置文件\n├── test    // 存放各个服务模块的模板和脚本文件\n├── release // 该文件夹下存放编译好的文件\n│\t\t├── client\t\t\t\t\t\t\t\t\t// 存放客户端编译文件的文件夹\n│\t\t└── trade\t\t\t\t\t\t\t\t\t\t// 存放交易核心编译文件的文件夹\n├── run     // 运行目录\n│\t\t├── trade\n│\t\t│\t\t├── flow\t\t\t\t\t\t\t\t// 存放交易服务流水文件夹(包含所有消息的顺序排列)\n│\t\t│\t\t├── snap\t\t\t\t\t\t\t\t// 存放交易服务快照文件夹\n│\t\t│\t\t├── dump\t\t\t\t\t\t\t\t// 存放交易服务错误消息文件夹\n│\t\t│\t\t├── backup_remote.sh\t\t// 备份必要文件到其它机器\n│\t\t│\t\t├── get1.sh\t\t\t\t\t\t\t// 获取最新必备的调试文件(用于本地调试)\n│\t\t│\t\t├── stop.sh\t\t\t\t\t\t\t// 停止当前服务\n│\t\t│\t\t├── backup.sh\t\t\t\t\t\t// 备份必要文件到本地backup目录\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空交易服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── diffsnap.sh\t\t\t\t\t// 比较两个snap文件的差别\n│\t\t│\t\t├── repair.sh\t\t\t\t\t\t// 清除导致服务无法继续运行的消息\n│\t\t│\t\t├── rollback\t\t\t\t\t\t// 恢复指定用户到指定快照数据(该操作可能导致帐不平，需要有后续操作)\n│\t\t│\t\t├── rsync.sh\t\t\t\t\t\t// 实时同步必要文件到远程机器\n│\t\t│\t\t├── trade\t\t\t\t\t\t\t\t// 可执行主文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 交易服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t├── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t│\t\t├── trade.*.log\t\t\t\t\t// 交易服务日志\n│\t\t│\t\t├── trade.ini\t\t\t\t\t\t// 交易服务基本配置(如：内存大小，日志存放路径)\n│\t\t│\t\t└── dumpPhase.log\t\t\t\t// 交易服务快照完成之后的最后一个序号文件\n│\t\t├── sinkdb\n│\t\t│\t\t├── flow\t\t\t\t\t\t\t\t// 存放同步数据库服务流水文件夹(包含所有消息的顺序排列)\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空同步数据库服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── sinkdb\t\t\t\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 同步数据库服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t├── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t│\t\t├── sinkdb.*.log\t\t\t\t// 同步数据库服务日志\n│\t\t│\t\t└── sinkdb.ini\t\t\t\t\t// 同步数据库服务基本配置(如：内存大小，日志存放路径)\n│\t\t├── sinkredis\n│\t\t│\t\t├── flow\t\t\t\t\t\t\t\t// 存放同步redis服务流水文件夹(包含所有消息的顺序排列)\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空同步redis服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── sinkredis\t\t\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 同步redis服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t├── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t│\t\t├── sinkredis.*.log\t\t\t// 同步redis服务日志\n│\t\t│\t\t└── sinkredis.ini\t\t\t\t// 同步redis服务基本配置(如：内存大小，日志存放路径)\n│\t\t├── triggerorder\n│   │\t\t├── flow\t\t\t\t\t\t\t\t// 存放条件单服务流水文件夹(包含所有消息的顺序排列)\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空条件单服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── triggerorder\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 条件单服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t├── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t│\t\t├── triggerorder.*.log\t// 条件单服务日志\n│\t\t│\t\t└── triggerorder.ini\t\t// 条件单服务基本配置(如：内存大小，日志存放路径)\n│\t\t├── query\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空查询服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── query\t\t\t\t\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 查询服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t├── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t│\t\t├── query.*.log\t\t\t\t\t// 查询服务日志\n│\t\t│\t\t└── query.ini\t\t\t\t\t\t// 查询服务基本配置(如：内存大小，日志存放路径)\n│\t\t├── redis\n│\t\t│\t\t├── bigkeys.sh\t\t\t\t\t// 查看redis里面最大数据对应的key\n│\t\t│\t\t├── start.sh\t\t\t\t\t\t// 启动redis\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空redis的缓存(必须服务停止后才能执行)\n│\t\t│\t\t├── redis\t\t\t\t\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── redis-cli\t\t\t\t\t\t// redis命令行执行文件\n│\t\t│\t\t├── redis.linux.conf\t\t// redis配置文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t└── nohup.out\t\t\t\t\t\t// redis的stt输出文件\n│\t\t├── marketmaker\n│\t\t│\t\t├── flow\t\t\t\t\t\t\t\t// 存放行情服务流水文件夹(包含所有消息的顺序排列)\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空行情服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t│\t\t├── marketmaker\t\t\t\t\t// 主可执行文件\n│\t\t│\t\t├── *.so\t\t\t\t\t\t\t\t// 可执行文件\n│\t\t│\t\t├── network.ini\t\t\t\t\t// 网络配置文件(所有模块的网络配置)\n│\t\t│\t\t├── nohup.out\t\t\t\t\t\t// 行情服务的stt输出文件\n│\t\t│\t\t├── omq.*.log\t\t\t\t\t\t// omq的日志文件\n│\t\t│\t\t└── omq.ini\t\t\t\t\t\t\t// omq的配置文件\n│\t\t├── client\n│\t\t│\t\t├── nginx\t\t\t\t\t\t\t\t// 客户端容器\n│\t\t│\t\t├── show.sh\t\t\t\t\t\t\t// 显示客户端信息\n│\t\t│\t\t├── clean.sh\t\t\t\t\t\t// 清空客户端缓存和日志文件\n│\t\t│\t\t├── start.sh\t\t\t\t\t\t// 启动客户端\n│\t\t│\t\t└── stop.sh\t\t\t\t\t\t\t// 停止客户端\n│\t\t├── backup_remote.sh\t\t\t\t// 备份当前机器上所有服务必要文件到其它机器\n│\t\t├── cleanlog.sh\t\t\t\t\t\t\t// 清除当前机器上的所有服务日志\n│\t\t├── mysql.sh\t\t\t\t\t\t\t\t// 数据库执行命令\n│\t\t├── backup.sh\t\t\t\t\t\t\t\t// 备份当前机器上所有服务必要文件到本地backup目录\n│\t\t├── clean.sh\t\t\t\t\t\t\t\t// 清空当前机器上服务的缓存，日志文件，流水文件等(必须服务停止后才能执行)\n│\t\t├── pack.sh\t\t\t\t\t\t\t\t\t// 打包，不需要手动执行\n│\t\t├── before_stop.sh\t\t\t\t\t// 停止服务前执行，不需要手动执行\n│\t\t├── start.sh\t\t\t\t\t\t\t\t// 启动当前机器上的所有服务\n│\t\t├── stop.sh\t\t\t\t\t\t\t\t\t// 停止当前机器上的所有服务\n│\t\t├── chkver.sh\t\t\t\t\t\t\t\t// 检查版本\n│\t\t├── rsync.sh\t\t\t\t\t\t\t\t// 实时同步当前机器上所有服务的必要文件到远程机器\n│\t\t├── svn_revert.sh\t\t\t\t\t\t// svn revert(svn命令)\n│\t\t├── mdbsnap.sh\t\t\t\t\t\t\t// 打快照\n│\t\t├── show.sh\t\t\t\t\t\t\t\t\t// 显示当前机器上的所有服务\n│\t\t└── svn_stop.sh\t\t\t\t\t\t\t// 停止svn\n└── repair_run.sh\t\t\t\t\t\t\t\t// 初始化\n```\n"}